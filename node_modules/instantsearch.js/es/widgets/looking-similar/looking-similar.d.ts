
import type { LookingSimilarWidgetDescription, LookingSimilarConnectorParams } from '../../connectors/looking-similar/connectLookingSimilar';
import type { Template, WidgetFactory, Hit } from '../../types';
import type { RecommendResultItem } from 'algoliasearch-helper';
import type { RecommendClassNames, LookingSimilarProps as LookingSimilarUiProps } from 'instantsearch-ui-components';
export type LookingSimilarCSSClasses = Partial<RecommendClassNames>;
export type LookingSimilarTemplates = Partial<{
    /**
     * Template to use when there are no results.
     */
    empty: Template<RecommendResultItem>;
    /**
     * Template to use for the header of the widget.
     */
    header: Template<Pick<Parameters<NonNullable<LookingSimilarUiProps<Hit>['headerComponent']>>[0], 'items'> & {
        cssClasses: RecommendClassNames;
    }>;
    /**
     * Template to use for each result. This template will receive an object containing a single record.
     */
    item: Template<Hit>;
}>;
type LookingSimilarWidgetParams = {
    /**
     * CSS Selector or HTMLElement to insert the widget.
     */
    container: string | HTMLElement;
    /**
     * Templates to use for the widget.
     */
    templates?: LookingSimilarTemplates;
    /**
     * CSS classes to add.
     */
    cssClasses?: LookingSimilarCSSClasses;
};
export type LookingSimilarWidget = WidgetFactory<LookingSimilarWidgetDescription & {
    $$widgetType: 'ais.lookingSimilar';
}, LookingSimilarConnectorParams, LookingSimilarWidgetParams>;
declare const lookingSimilar: LookingSimilarWidget;
export default lookingSimilar;
