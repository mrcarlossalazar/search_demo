import type { Connector, TransformItems, Hit, BaseHit } from '../../types';
import type { PlainSearchParameters, RecommendResultItem } from 'algoliasearch-helper';
export type FrequentlyBoughtTogetherRenderState<THit extends BaseHit = BaseHit> = {
    /**
     * The matched recommendations from Algolia API.
     */
    items: Array<Hit<THit>>;
};
export type FrequentlyBoughtTogetherConnectorParams<THit extends BaseHit = BaseHit> = {
    /**
     * The objectIDs of the items to get the frequently bought together items for.
     */
    objectIDs: string[];
    /**
     * Threshold for the recommendations confidence score (between 0 and 100). Only recommendations with a greater score are returned.
     */
    threshold?: number;
    /**
     * The maximum number of recommendations to return.
     */
    limit?: number;
    /**
     * Parameters to pass to the request.
     */
    queryParameters?: Omit<PlainSearchParameters, 'page' | 'hitsPerPage' | 'offset' | 'length'>;
    /**
     * Whether to escape HTML tags from items string values.
     *
     * @default true
     */
    escapeHTML?: boolean;
    /**
     * Function to transform the items passed to the templates.
     */
    transformItems?: TransformItems<Hit<THit>, {
        results: RecommendResultItem;
    }>;
};
export type FrequentlyBoughtTogetherWidgetDescription<THit extends BaseHit = BaseHit> = {
    $$type: 'ais.frequentlyBoughtTogether';
    renderState: FrequentlyBoughtTogetherRenderState<THit>;
};
export type FrequentlyBoughtTogetherConnector<THit extends BaseHit = BaseHit> = Connector<FrequentlyBoughtTogetherWidgetDescription<THit>, FrequentlyBoughtTogetherConnectorParams<THit>>;
declare const connectFrequentlyBoughtTogether: FrequentlyBoughtTogetherConnector;
export default connectFrequentlyBoughtTogether;
