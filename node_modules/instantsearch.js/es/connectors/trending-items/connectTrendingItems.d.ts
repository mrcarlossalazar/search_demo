import type { Connector, TransformItems, Hit, BaseHit } from '../../types';
import type { PlainSearchParameters, RecommendResultItem } from 'algoliasearch-helper';
export type TrendingItemsRenderState<THit extends BaseHit = BaseHit> = {
    /**
     * The matched recommendations from the Algolia API.
     */
    items: Array<Hit<THit>>;
};
export type TrendingItemsConnectorParams<THit extends BaseHit = BaseHit> = ({
    /**
     * The facet attribute to get recommendations for.
     */
    facetName: string;
    /**
     * The facet value to get recommendations for.
     */
    facetValue: string;
} | {
    facetName?: never;
    facetValue?: never;
}) & {
    /**
     * The number of recommendations to retrieve.
     */
    limit?: number;
    /**
     * The threshold for the recommendations confidence score (between 0 and 100).
     */
    threshold?: number;
    /**
     * List of search parameters to send.
     */
    fallbackParameters?: Omit<PlainSearchParameters, 'page' | 'hitsPerPage' | 'offset' | 'length'>;
    /**
     * List of search parameters to send.
     */
    queryParameters?: Omit<PlainSearchParameters, 'page' | 'hitsPerPage' | 'offset' | 'length'>;
    /**
     * Whether to escape HTML tags from items string values.
     *
     * @default true
     */
    escapeHTML?: boolean;
    /**
     * Function to transform the items passed to the templates.
     */
    transformItems?: TransformItems<Hit<THit>, {
        results: RecommendResultItem;
    }>;
};
export type TrendingItemsWidgetDescription<THit extends BaseHit = BaseHit> = {
    $$type: 'ais.trendingItems';
    renderState: TrendingItemsRenderState<THit>;
};
export type TrendingItemsConnector<THit extends BaseHit = BaseHit> = Connector<TrendingItemsWidgetDescription<THit>, TrendingItemsConnectorParams<THit>>;
declare const connectTrendingItems: TrendingItemsConnector;
export default connectTrendingItems;
