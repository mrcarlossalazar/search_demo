import type { Connector, TransformItems, Hit, BaseHit } from '../../types';
import type { PlainSearchParameters, RecommendResultItem } from 'algoliasearch-helper';
export type RelatedProductsRenderState<THit extends BaseHit = BaseHit> = {
    /**
     * The matched recommendations from the Algolia API.
     */
    items: Array<Hit<THit>>;
};
export type RelatedProductsConnectorParams<THit extends BaseHit = BaseHit> = {
    /**
     * The `objectIDs` of the items to get related products from.
     */
    objectIDs: string[];
    /**
     * The number of recommendations to retrieve.
     */
    limit?: number;
    /**
     * The threshold for the recommendations confidence score (between 0 and 100).
     */
    threshold?: number;
    /**
     * List of search parameters to send.
     */
    fallbackParameters?: Omit<PlainSearchParameters, 'page' | 'hitsPerPage' | 'offset' | 'length'>;
    /**
     * List of search parameters to send.
     */
    queryParameters?: Omit<PlainSearchParameters, 'page' | 'hitsPerPage' | 'offset' | 'length'>;
    /**
     * Whether to escape HTML tags from items string values.
     *
     * @default true
     */
    escapeHTML?: boolean;
    /**
     * Function to transform the items passed to the templates.
     */
    transformItems?: TransformItems<Hit<THit>, {
        results: RecommendResultItem;
    }>;
};
export type RelatedProductsWidgetDescription<THit extends BaseHit = BaseHit> = {
    $$type: 'ais.relatedProducts';
    renderState: RelatedProductsRenderState<THit>;
};
export type RelatedProductsConnector<THit extends BaseHit = BaseHit> = Connector<RelatedProductsWidgetDescription<THit>, RelatedProductsConnectorParams<THit>>;
declare const connectRelatedProducts: RelatedProductsConnector;
export default connectRelatedProducts;
